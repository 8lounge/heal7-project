# ====================================
# HEAL7 사주명리학 Nginx 설정
# 
# 완전 분리형 아키텍처를 위한 통합 Nginx 설정
# 프론트엔드(정적) + 백엔드(API) 로드밸런싱
# 
# @domain saju.heal7.com
# @version 2.0.0 (완전 분리형)
# ====================================

# 업스트림 백엔드 서버 정의 (완전 분리형)
upstream heal7_saju_backend {
    # 백엔드 분석 엔진 (포트 8010)
    server 127.0.0.1:8010 weight=3 max_fails=3 fail_timeout=30s;
    
    # 로드밸런싱 설정
    least_conn;  # 연결 수 기반 로드밸런싱
    keepalive 32;  # Keep-alive 연결 유지
}

# 프론트엔드 Next.js 서버 (개발 시에만 사용)
upstream heal7_saju_frontend_dev {
    server 127.0.0.1:3000 weight=1 max_fails=2 fail_timeout=10s;
    keepalive 16;
}

# 레이트 리미팅 존 정의
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/m;
limit_req_zone $binary_remote_addr zone=general_limit:10m rate=100r/m;
limit_req_zone $binary_remote_addr zone=static_limit:10m rate=200r/m;

# 연결 수 제한
limit_conn_zone $binary_remote_addr zone=conn_limit:10m;

# 캐시 존 정의
proxy_cache_path /var/cache/nginx/heal7_saju 
    levels=1:2 
    keys_zone=heal7_saju_cache:100m 
    max_size=1g 
    inactive=60m 
    use_temp_path=off;

# 메인 서버 블록 (HTTPS)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name saju.heal7.com;

    # ====================================
    # 🔐 SSL/TLS 설정
    # ====================================
    
    # SSL 인증서 경로
    ssl_certificate /etc/letsencrypt/live/saju.heal7.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saju.heal7.com/privkey.pem;
    ssl_trusted_certificate /etc/letsencrypt/live/saju.heal7.com/chain.pem;
    
    # SSL 보안 설정
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 1d;
    ssl_session_tickets off;
    
    # OCSP Stapling
    ssl_stapling on;
    ssl_stapling_verify on;
    resolver 8.8.8.8 8.8.4.4 valid=300s;
    resolver_timeout 5s;
    
    # ====================================
    # 🛡️ 보안 헤더
    # ====================================
    
    # HSTS (HTTP Strict Transport Security)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    
    # Content Security Policy
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://www.googletagmanager.com https://www.google-analytics.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https:; connect-src 'self' https://api.openai.com https://apis.data.go.kr; frame-src 'none'; object-src 'none';" always;
    
    # 기타 보안 헤더
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
    
    # ====================================
    # 📁 정적 파일 서빙 (프론트엔드)
    # ====================================
    
    # 메인 문서 루트
    root /var/www/heal7-saju/frontend;
    index index.html index.htm;
    
    # 일반적인 정적 파일 처리
    location / {
        # 레이트 리미팅
        limit_req zone=general_limit burst=20 nodelay;
        limit_conn conn_limit 10;
        
        # 정적 파일 우선 서빙, 없으면 Next.js로 폴백
        try_files $uri $uri/ @nextjs;
        
        # 캐시 설정
        expires 1h;
        add_header Cache-Control "public, no-transform";
        
        # Gzip 압축
        gzip on;
        gzip_vary on;
        gzip_min_length 1024;
        gzip_types
            text/plain
            text/css
            text/xml
            text/javascript
            application/javascript
            application/xml+rss
            application/json
            image/svg+xml;
    }
    
    # Next.js 정적 에셋 (_next/static/)
    location /_next/static/ {
        limit_req zone=static_limit burst=50 nodelay;
        
        alias /var/www/heal7-saju/frontend/.next/static/;
        
        # 장기 캐싱 (1년)
        expires 1y;
        add_header Cache-Control "public, immutable";
        
        # Gzip 압축
        gzip on;
        gzip_static on;
    }
    
    # 공용 정적 파일 (이미지, 폰트 등)
    location /static/ {
        limit_req zone=static_limit burst=50 nodelay;
        
        alias /var/www/heal7-saju/frontend/public/;
        
        # 미디어 파일 캐싱
        location ~* \.(jpg|jpeg|png|gif|ico|svg|webp|avif)$ {
            expires 30d;
            add_header Cache-Control "public, immutable";
        }
        
        # 폰트 파일 캐싱
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
        }
        
        # 기타 정적 자원
        location ~* \.(css|js|json|xml|txt)$ {
            expires 7d;
            add_header Cache-Control "public";
        }
    }
    
    # ====================================
    # 🚀 API 라우팅 (백엔드)
    # ====================================
    
    # 백엔드 API 엔드포인트
    location /api/ {
        # 레이트 리미팅 (API 전용)
        limit_req zone=api_limit burst=5 nodelay;
        limit_conn conn_limit 5;
        
        # 프록시 설정
        proxy_pass http://heal7_saju_backend;
        proxy_http_version 1.1;
        
        # 연결 유지
        proxy_set_header Connection "";
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_set_header X-Forwarded-Host $host;
        proxy_set_header X-Forwarded-Port $server_port;
        
        # 타임아웃 설정
        proxy_connect_timeout 10s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
        
        # 버퍼링 설정
        proxy_buffering on;
        proxy_buffer_size 4k;
        proxy_buffers 8 4k;
        proxy_busy_buffers_size 8k;
        
        # 캐시 설정 (선택적)
        proxy_cache heal7_saju_cache;
        proxy_cache_valid 200 302 10m;
        proxy_cache_valid 404 1m;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_bypass $http_pragma $http_authorization;
        
        # API 캐시 헤더
        add_header X-Cache-Status $upstream_cache_status;
    }
    
    # 백엔드 헬스체크
    location /api/health {
        # 레이트 리미팅 완화
        limit_req zone=general_limit burst=10 nodelay;
        
        proxy_pass http://heal7_saju_backend/health;
        proxy_http_version 1.1;
        proxy_set_header Host $host;
        proxy_connect_timeout 5s;
        proxy_read_timeout 5s;
        
        # 헬스체크는 캐시하지 않음
        proxy_cache off;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
    }
    
    # ====================================
    # 🔧 특수 라우팅
    # ====================================
    
    # Next.js 개발 서버 폴백 (개발 환경에서만)
    location @nextjs {
        # 개발 환경에서만 활성화
        # proxy_pass http://heal7_saju_frontend_dev;
        
        # 프로덕션에서는 404 반환
        return 404;
    }
    
    # 사이트맵 및 robots.txt
    location ~ ^/(sitemap\.xml|robots\.txt)$ {
        root /var/www/heal7-saju/frontend/public;
        expires 1d;
        add_header Cache-Control "public";
    }
    
    # 파비콘 및 아이콘
    location ~ ^/(favicon\.ico|apple-touch-icon.*\.png|android-chrome.*\.png)$ {
        root /var/www/heal7-saju/frontend/public;
        expires 30d;
        add_header Cache-Control "public, immutable";
        
        # 없을 경우 404 대신 빈 응답
        log_not_found off;
        access_log off;
    }
    
    # PWA 매니페스트
    location /site.webmanifest {
        root /var/www/heal7-saju/frontend/public;
        expires 1d;
        add_header Cache-Control "public";
        add_header Content-Type "application/manifest+json";
    }
    
    # 서비스 워커
    location /sw.js {
        root /var/www/heal7-saju/frontend/public;
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Content-Type "application/javascript";
    }
    
    # ====================================
    # 📊 모니터링 및 로깅
    # ====================================
    
    # 접근 로그 설정
    access_log /var/log/nginx/saju.heal7.com.access.log combined buffer=16k;
    error_log /var/log/nginx/saju.heal7.com.error.log warn;
    
    # 상태 모니터링 (내부에서만 접근 가능)
    location /nginx-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        allow ::1;
        deny all;
    }
    
    # ====================================
    # 🚫 보안 및 차단 설정
    # ====================================
    
    # 숨겨진 파일 접근 차단
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 백업 파일 접근 차단
    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 민감한 파일 확장자 차단
    location ~* \.(env|log|sql|bak|backup|old)$ {
        deny all;
        access_log off;
        log_not_found off;
    }
    
    # 관리자 페이지 IP 제한
    location /admin {
        allow 127.0.0.1;
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        allow 192.168.0.0/16;
        deny all;
        
        try_files $uri $uri/ @nextjs;
    }
    
    # ====================================
    # 🎯 에러 페이지 설정
    # ====================================
    
    # 커스텀 에러 페이지
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /var/www/heal7-saju/frontend/public;
        internal;
    }
    
    location = /50x.html {
        root /var/www/heal7-saju/frontend/public;
        internal;
    }
}

# HTTP to HTTPS 리다이렉트
server {
    listen 80;
    listen [::]:80;
    server_name saju.heal7.com;
    
    # ACME Challenge (Let's Encrypt)
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # 모든 HTTP 요청을 HTTPS로 리다이렉트
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# www 서브도메인 리다이렉트
server {
    listen 80;
    listen 443 ssl http2;
    server_name www.saju.heal7.com;
    
    # SSL 설정 (HTTPS 요청 시)
    ssl_certificate /etc/letsencrypt/live/saju.heal7.com/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/saju.heal7.com/privkey.pem;
    
    # www 제거 리다이렉트
    return 301 https://saju.heal7.com$request_uri;
}

# ====================================
# 📝 설정 요약 및 사용법
# ====================================

# 🎯 주요 특징:
# 1. 완전 분리형 아키텍처 지원
#    - 프론트엔드: 정적 파일 서빙 (/var/www/heal7-saju/frontend/)
#    - 백엔드: API 프록시 (포트 8010)
# 
# 2. 고성능 설정
#    - HTTP/2 지원
#    - Gzip 압축
#    - 계층적 캐싱 (Nginx + 브라우저)
#    - Keep-alive 연결
# 
# 3. 보안 강화
#    - HTTPS 강제
#    - 보안 헤더 완비
#    - 레이트 리미팅
#    - 민감한 파일 접근 차단
# 
# 4. 모니터링 및 로깅
#    - 상세한 접근 로그
#    - 에러 로그 분리
#    - 상태 모니터링 엔드포인트

# 🚀 배포 단계:
# 1. 정적 파일 빌드 및 배포:
#    cd /home/ubuntu/heal7-saju/frontend
#    npm run build
#    cp -r .next/static /var/www/heal7-saju/frontend/_next/
#    cp -r public/* /var/www/heal7-saju/frontend/public/
# 
# 2. Nginx 설정 적용:
#    sudo cp /home/ubuntu/heal7-saju/deployment/nginx/saju.heal7.com.conf /etc/nginx/sites-available/
#    sudo ln -sf /etc/nginx/sites-available/saju.heal7.com.conf /etc/nginx/sites-enabled/
#    sudo nginx -t && sudo systemctl reload nginx
# 
# 3. 백엔드 서비스 시작:
#    cd /home/ubuntu/heal7-saju/backend
#    python main.py
# 
# 4. SSL 인증서 갱신 (자동):
#    sudo certbot renew --nginx

# ⚡ 성능 최적화 권장사항:
# 1. /var/cache/nginx/ 디렉터리 권한 설정
# 2. 로그 로테이션 설정 (logrotate)
# 3. 모니터링 도구 연동 (Prometheus, Grafana)
# 4. CDN 연동 (Cloudflare, AWS CloudFront)
# 5. 정기적인 캐시 정리 스크립트 작성