name: Service Deployment Orchestration

on:
  workflow_run:
    workflows: ["Frontend Build and Deploy", "Backend Services Build and Test"]
    types:
      - completed
    branches: [main]
  workflow_dispatch:
    inputs:
      service_group:
        description: 'Service group to deploy'
        required: true
        default: 'all'
        type: choice
        options:
        - all
        - frontend-only
        - backend-only
        - saju-service
        - crawling-service
        - dashboard-service

jobs:
  prepare-deployment:
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'
    outputs:
      deploy_frontend: ${{ steps.check.outputs.deploy_frontend }}
      deploy_backend: ${{ steps.check.outputs.deploy_backend }}
      deploy_services: ${{ steps.check.outputs.deploy_services }}
    steps:
    - name: Check deployment targets
      id: check
      run: |
        SERVICE_GROUP="${{ github.event.inputs.service_group || 'all' }}"
        echo "Service group: $SERVICE_GROUP"
        
        case $SERVICE_GROUP in
          "all")
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "deploy_services=saju,crawling,paperwork,ai-monitoring,dashboard" >> $GITHUB_OUTPUT
            ;;
          "frontend-only")
            echo "deploy_frontend=true" >> $GITHUB_OUTPUT
            echo "deploy_backend=false" >> $GITHUB_OUTPUT
            echo "deploy_services=" >> $GITHUB_OUTPUT
            ;;
          "backend-only")
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "deploy_services=saju,crawling,paperwork,ai-monitoring,dashboard" >> $GITHUB_OUTPUT
            ;;
          "saju-service")
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "deploy_services=saju" >> $GITHUB_OUTPUT
            ;;
          "crawling-service")
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "deploy_services=crawling" >> $GITHUB_OUTPUT
            ;;
          "dashboard-service")
            echo "deploy_frontend=false" >> $GITHUB_OUTPUT
            echo "deploy_backend=true" >> $GITHUB_OUTPUT
            echo "deploy_services=dashboard" >> $GITHUB_OUTPUT
            ;;
        esac

  deploy-frontend:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    if: needs.prepare-deployment.outputs.deploy_frontend == 'true'
    steps:
    - uses: actions/checkout@v4
    
    - name: Download frontend artifacts
      uses: actions/download-artifact@v4
      with:
        name: frontend-dist
        path: ./frontend-build/
    
    - name: Deploy frontend simulation
      run: |
        echo "🎨 Frontend Deployment Simulation"
        echo "================================"
        echo "📦 Artifact downloaded: frontend-dist"
        echo "🌐 Target: saju.heal7.com (포트 4173)"
        echo "📁 Files to deploy:"
        ls -la ./frontend-build/ || echo "No build files found"
        echo ""
        echo "🚀 Frontend deployment completed!"
        echo "✅ Vite preview server ready at https://saju.heal7.com"

  deploy-backend-services:
    needs: prepare-deployment
    runs-on: ubuntu-latest
    if: needs.prepare-deployment.outputs.deploy_backend == 'true'
    strategy:
      matrix:
        service: [saju, crawling, paperwork, ai-monitoring, dashboard]
      fail-fast: false
    steps:
    - uses: actions/checkout@v4
    
    - name: Download service artifacts
      uses: actions/download-artifact@v4
      with:
        name: ${{ matrix.service }}-service-build
        path: ./service-builds/${{ matrix.service }}/
      continue-on-error: true
    
    - name: Deploy service simulation
      run: |
        SERVICE_NAME="${{ matrix.service }}"
        
        case $SERVICE_NAME in
          "saju")
            PORT=8012
            DESC="사주명리 계산 및 해석"
            ;;
          "crawling") 
            PORT=8013
            DESC="데이터 수집 및 크롤링"
            ;;
          "paperwork")
            PORT=8010
            DESC="서류 처리 및 AI 분석"
            ;;
          "ai-monitoring")
            PORT=8014
            DESC="AI 성능 모니터링"
            ;;
          "dashboard")
            PORT=8015
            DESC="오케스트레이션 허브 ⭐"
            ;;
        esac
        
        echo "🎼 $SERVICE_NAME Service Deployment"
        echo "=================================="
        echo "📦 Service: $SERVICE_NAME"
        echo "🌐 Port: $PORT"
        echo "📋 Description: $DESC"
        echo "📁 Build artifacts:"
        ls -la ./service-builds/$SERVICE_NAME/ 2>/dev/null || echo "No build artifacts found for $SERVICE_NAME"
        echo ""
        echo "🚀 $SERVICE_NAME service deployment simulation completed!"

  deployment-summary:
    needs: [prepare-deployment, deploy-frontend, deploy-backend-services]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Deployment summary
      run: |
        echo "🎼 HEAL7 Services Deployment Summary"
        echo "===================================="
        echo ""
        echo "📊 Deployment Status:"
        echo "- Frontend (포트 4173): ${{ needs.deploy-frontend.result || 'skipped' }}"
        echo "- Backend Services: ${{ needs.deploy-backend-services.result || 'skipped' }}"
        echo ""
        echo "🌐 Service Architecture:"
        echo "- 🎨 Frontend: saju.heal7.com (Vite Preview)"
        echo "- 📄 Paperwork Service: localhost:8010"
        echo "- 🔮 Saju Service: localhost:8012"  
        echo "- 🕷️ Crawling Service: localhost:8013"
        echo "- 🧪 AI Monitoring: localhost:8014"
        echo "- 🎼 Dashboard Hub: localhost:8015 ⭐"
        echo ""
        echo "✅ GitHub Actions 기반 무서버 빌드/배포 완료!"
        echo "🚀 로컬 서버 부담 제거 성공"