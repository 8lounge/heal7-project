#!/usr/bin/env python3
"""
Paperwork AI 백엔드 라우터
- 문서 OCR 및 AI 변환 처리
- HWP/HWPX 파일 지원
"""

import os
import json
import logging
from datetime import datetime
from typing import Optional, Dict, Any, List
from fastapi import APIRouter, HTTPException, UploadFile, File, Form
from fastapi.responses import JSONResponse
from pydantic import BaseModel
import aiohttp
import asyncio
from pathlib import Path

# 로깅 설정
logger = logging.getLogger(__name__)

# 라우터 생성
router = APIRouter(prefix="/paperwork", tags=["Paperwork"])

# AI 모델 설정
AI_MODELS = {
    'gemini': {
        'name': 'Google Gemini 2.0 Flash',
        'api_key': os.getenv('GEMINI_API_KEY'),
        'endpoint': 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent'
    },
    'gpt4': {
        'name': 'OpenAI GPT-4',
        'api_key': os.getenv('OPENAI_API_KEY'),
        'endpoint': 'https://api.openai.com/v1/chat/completions'
    },
    'claude': {
        'name': 'Claude 3.5 Sonnet',
        'api_key': os.getenv('ANTHROPIC_API_KEY'),
        'endpoint': 'https://api.anthropic.com/v1/messages'
    },
    'clova': {
        'name': 'Naver ClovaX',
        'api_key': os.getenv('CLOVA_API_KEY'),
        'endpoint': 'https://clovastudio.stream.ntruss.com/v3/chat-completions/HCX-007'
    }
}

class DocumentConversionRequest(BaseModel):
    """문서 변환 요청 모델"""
    text: str
    extraction_type: str  # 'md' or 'text_table'
    ai_model: str
    reference_files: Optional[List[str]] = []

class OCRRequest(BaseModel):
    """OCR 처리 요청 모델"""
    image_data: str  # Base64 encoded image
    lang: str = 'ko'
    enable_table: bool = True

@router.post("/ai-edit")
async def convert_document(request: DocumentConversionRequest):
    """
    문서를 AI를 사용하여 변환
    - MD 파일 또는 텍스트+표 형식으로 변환
    """
    try:
        # 입력 검증
        if not request.text:
            raise HTTPException(status_code=400, detail="텍스트가 비어있습니다")
        
        if request.ai_model not in AI_MODELS:
            raise HTTPException(status_code=400, detail=f"지원하지 않는 AI 모델: {request.ai_model}")
        
        # AI 모델 설정
        model_config = AI_MODELS[request.ai_model]
        
        # 프롬프트 생성
        if request.extraction_type == 'md':
            prompt = f"""
다음 텍스트를 깔끔한 Markdown 형식으로 변환해주세요.
제목, 목록, 표, 코드 블록 등 적절한 Markdown 문법을 사용하세요.

원본 텍스트:
{request.text}

Markdown 변환 결과:
"""
        else:  # text_table
            prompt = f"""
다음 텍스트에서 주요 내용과 표를 추출하여 정리해주세요.
표는 명확한 형식으로 구분하여 표시하세요.

원본 텍스트:
{request.text}

정리된 결과:
"""
        
        # AI API 호출
        converted_text = await call_ai_api(model_config, prompt)
        
        # 응답 생성
        return JSONResponse(content={
            "success": True,
            "result": converted_text,
            "ai_model": model_config['name'],
            "extraction_type": request.extraction_type,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"문서 변환 오류: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/ocr")
async def process_ocr(request: OCRRequest):
    """
    네이버 CLOVA OCR API를 사용한 OCR 처리
    """
    try:
        # 네이버 OCR API 설정
        ocr_url = os.getenv('NAVER_OCR_URL', 'https://your-ocr-api.apigw.ntruss.com/custom/v1/your-model/general')
        secret_key = os.getenv('NAVER_OCR_SECRET_KEY')
        
        if not secret_key:
            raise HTTPException(status_code=500, detail="OCR API 키가 설정되지 않았습니다")
        
        # OCR API 요청 생성
        ocr_request = {
            "version": "V2",
            "requestId": f"paperwork-{datetime.now().timestamp()}",
            "timestamp": int(datetime.now().timestamp() * 1000),
            "lang": request.lang,
            "images": [{
                "format": "png",
                "name": "image",
                "data": request.image_data
            }],
            "enableTableDetection": request.enable_table
        }
        
        # API 호출
        async with aiohttp.ClientSession() as session:
            async with session.post(
                ocr_url,
                json=ocr_request,
                headers={'X-OCR-SECRET': secret_key}
            ) as response:
                if response.status != 200:
                    raise HTTPException(status_code=response.status, detail="OCR API 호출 실패")
                
                result = await response.json()
                
                # 텍스트 추출
                extracted_text = extract_text_from_ocr(result)
                
                return JSONResponse(content={
                    "success": True,
                    "text": extracted_text,
                    "timestamp": datetime.now().isoformat()
                })
                
    except Exception as e:
        logger.error(f"OCR 처리 오류: {e}")
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/convert-hwp")
async def convert_hwp(file: UploadFile = File(...)):
    """
    HWP/HWPX 파일을 텍스트로 변환
    """
    try:
        # 파일 확장자 확인
        if not file.filename.lower().endswith(('.hwp', '.hwpx')):
            raise HTTPException(status_code=400, detail="HWP 또는 HWPX 파일만 지원됩니다")
        
        # 임시 파일 저장
        temp_path = Path(f"/tmp/{file.filename}")
        content = await file.read()
        temp_path.write_bytes(content)
        
        # HWP 변환 (실제로는 pyhwp 라이브러리 사용 필요)
        # 여기서는 간단한 예시만 제공
        extracted_text = f"[HWP 파일 변환 필요: {file.filename}]\n\n이 기능은 pyhwp 라이브러리 설치가 필요합니다."
        
        # 임시 파일 삭제
        temp_path.unlink()
        
        return JSONResponse(content={
            "success": True,
            "text": extracted_text,
            "filename": file.filename,
            "timestamp": datetime.now().isoformat()
        })
        
    except Exception as e:
        logger.error(f"HWP 변환 오류: {e}")
        raise HTTPException(status_code=500, detail=str(e))

async def call_ai_api(model_config: Dict, prompt: str) -> str:
    """
    AI API 호출 헬퍼 함수
    """
    try:
        api_key = model_config['api_key']
        endpoint = model_config['endpoint']
        
        if not api_key:
            raise ValueError(f"API 키가 설정되지 않았습니다: {model_config['name']}")
        
        # Gemini API
        if 'gemini' in model_config['name'].lower():
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    f"{endpoint}?key={api_key}",
                    json={
                        "contents": [{
                            "parts": [{"text": prompt}]
                        }],
                        "generationConfig": {
                            "temperature": 0.7,
                            "maxOutputTokens": 4096
                        }
                    }
                ) as response:
                    result = await response.json()
                    return result['candidates'][0]['content']['parts'][0]['text']
        
        # OpenAI GPT
        elif 'gpt' in model_config['name'].lower():
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    endpoint,
                    headers={'Authorization': f'Bearer {api_key}'},
                    json={
                        "model": "gpt-4",
                        "messages": [{"role": "user", "content": prompt}],
                        "temperature": 0.7,
                        "max_tokens": 4096
                    }
                ) as response:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
        
        # Claude
        elif 'claude' in model_config['name'].lower():
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    endpoint,
                    headers={
                        'x-api-key': api_key,
                        'anthropic-version': '2023-06-01'
                    },
                    json={
                        "model": "claude-3-5-sonnet-20241022",
                        "messages": [{"role": "user", "content": prompt}],
                        "max_tokens": 4096
                    }
                ) as response:
                    result = await response.json()
                    return result['content'][0]['text']
        
        # ClovaX
        elif 'clova' in model_config['name'].lower():
            async with aiohttp.ClientSession() as session:
                async with session.post(
                    endpoint,
                    headers={
                        'Authorization': f'Bearer {api_key}',
                        'X-NCP-CLOVASTUDIO-REQUEST-ID': f'paperwork-{datetime.now().timestamp()}'
                    },
                    json={
                        "messages": [
                            {"role": "system", "content": "당신은 문서 처리 전문가입니다."},
                            {"role": "user", "content": prompt}
                        ],
                        "maxTokens": 4096,
                        "temperature": 0.7
                    }
                ) as response:
                    result = await response.json()
                    return result['choices'][0]['message']['content']
        
        else:
            return f"[{model_config['name']} 모델 구현 필요]\n\n{prompt[:200]}..."
            
    except Exception as e:
        logger.error(f"AI API 호출 오류: {e}")
        return f"AI 처리 중 오류 발생: {str(e)}"

def extract_text_from_ocr(ocr_result: Dict) -> str:
    """
    OCR 결과에서 텍스트 추출
    """
    try:
        if not ocr_result.get('images'):
            return ""
        
        full_text = []
        for image in ocr_result['images']:
            # 일반 텍스트 필드
            if image.get('fields'):
                for field in image['fields']:
                    text = field.get('inferText', '')
                    if text:
                        full_text.append(text)
            
            # 표 데이터
            if image.get('tables'):
                for table in image['tables']:
                    full_text.append("\n[표]\n")
                    for cell in table.get('cells', []):
                        for line in cell.get('cellTextLines', []):
                            for word in line.get('cellWords', []):
                                full_text.append(word.get('inferText', ''))
                    full_text.append("\n")
        
        return ' '.join(full_text)
        
    except Exception as e:
        logger.error(f"OCR 텍스트 추출 오류: {e}")
        return ""

@router.get("/health")
async def health_check():
    """헬스체크 엔드포인트"""
    return {
        "status": "healthy",
        "service": "paperwork-ai",
        "timestamp": datetime.now().isoformat()
    }

@router.get("/models")
async def get_available_models():
    """사용 가능한 AI 모델 목록"""
    return {
        "models": list(AI_MODELS.keys()),
        "details": {k: v['name'] for k, v in AI_MODELS.items()},
        "timestamp": datetime.now().isoformat()
    }